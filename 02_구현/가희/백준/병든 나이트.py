# 1783번
# 체스판의 크기가 주어졌을 때, 병든 나이트가 여행에서 방문할 수 있는 칸의 최대 개수

# 나이트 ~ n*m 크기 체스판 가장 왼쪽 아래 칸에 위치
# <이동 방향>
# 1. 2칸 위, 1칸 오른쪽
# 2. 1칸 위, 2칸 오른쪽
# 3. 1칸 아래, 2칸 오른쪽
# 4. 2칸 아래, 1칸 오른쪽

# 나이트의 이동 횟수가 4번보다 적지 않으면, 이동 방법 모두 한 번씩 사용해야 함
# 4번보다 적은 경우, 이동 방법에 대한 제약 없음(위 4가지 안 써도 됨)

# 체스판 크기 (세로, 가로)
#  0 < N, M <= 2,000,000,000
n, m = map(int, input().split())
result = 0

if n == 1:
    result = 1
elif n == 2:
    result = min(4, (m-1)//2+1)
elif m < 7:
    result = min(4, m)
else:
    result = (2 + (m-5)) + 1
    
print(result)


# 이동 횟수가 4번보다 적은 경우와 4번 이상인 경우 분리하여 해결
# 이동 횟수가 4번이기 위해서는 체스판이 최소 3*7크기여야 한다.

# case1) n = 1
# 이동 x => 시작 지점만 방문하므로 1 출력

# case2) n = 2 
# 2,3번만 사용 가능  ~> 가로로 2칸씩 몇 번 이동할 수 있는지 계산 
# => (m-1)//2만큼 이동 가능
# 이동 가능 횟수는 최대 3번(4번 이상 이동 시 4가지 방법 모두 사용해야 하기 때문)이므로
# 나이트가 방문한 칸 수는 4(시작 칸 1 + 이동 가능 횟수)와  (m-1)//2+1 중 작은 값과 같다.

# case3) n>=3, m<7
# 세로로는 위, 아래 두 칸씩 이동 가능하므로 최대로 이동하기 위해서는
# 오른쪽으로 한 칸씩만 이동해야 한다.
# 이 경우 최대 이동 횟수는 m-1이고 
# 3보다 큰 값을 가질 수 없으므로(4번 이상 이동 시 4가지 방법 모두 사용해야 함)
# 이동 가능 횟수는 3과 m-1 중 작은 값과 같고, 
# 방문한 칸 수는 4와 m 중 작은 값과 같다.

# case4) n>=3, m>=7
# 1,4번 방법을 반복하는 것이 유리하다.
# 그러나 2,3번 이동도 한 번은 사용해야 하기 때문에 
# 이동 가능 횟수는 2 + (m-5) 이다.
# 2: 2,3번 이동도 한 번씩
# m-5: m - (시작 한 칸 + 2,3번 이동으로 인한 4칸)
# 따라서 최대 방문 가능한 칸 수는 (2+(m-5))+1




