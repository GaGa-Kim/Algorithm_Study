# 20055번
# 컨베이어 벨트가 종료되었을 때 몇 번째 단계가 진행 중이었는지 구하는 프로그램
# (가장 처음 수행되는 단계는 1번째 단계)

# 길이가 n인 컨베이어 벨트를 길이가 2n인 벨트가 감싸며 돌고 있음
# Ai ~ i번 칸의 내구도
# 1번 칸 위치를 올리는 위치, n번 칸 위치를 내리는 위치라고 함
# 로봇을 올리는 위치에 올리거나 로봇이 어떤 칸으로 이동하면 내구도 -1

# 컨베이어 벨트를 이용해 로봇을 옮기는 과정
# 1. 벨트가 각 칸 위에 있는 로봇과 함께 한 칸 회전
# 2. 가장 먼저 벨트에 올라간 로봇부터, 벨트가 회전하는 방향으로 한 칸 이동
#    (로봇이 이동하기 위해서는 이동하려는 칸에 로봇이 없으며,
#    그 칸의 내구도가 1 이상 남아 있어야 함. 이동할 수 없으면 가만히.) 
# 3. 올리는 위치에 있는 칸의 내구도가 0이 아니면 로봇 올림
# 4. 내구도가 0인 칸의 개수가 k개 이상이면 과정 종료
#    그렇지 않다면 1번으로 돌아감

from collections import deque

# 2 ≤ n ≤ 100, 1 ≤ k ≤ 2n
n, k = map(int, input().split())

# 각 칸의 내구도 (1 ≤ Ai ≤ 1,000)
belt = deque(list(map(int, input().split())))
# 로봇은 1 ~ n번째 칸까지만 존재
robot = deque([0] * n)

result = 0
while True:
    # 1. 벨트가 각 칸 위에 있는 로봇과 함께 한 칸 회전
    belt.rotate(1)
    robot.rotate(1)
    robot[-1] = 0 # 로봇이 내려가는 위치이므로 0
    
    # 2. 가장 먼저 벨트에 올라간 로봇부터, 벨트가 회전하는 방향으로 한 칸 이동
    if sum(robot): # 로봇이 존재하면
        # 로봇이 내려가는 위치의 인덱스가 i-1이므로 그 전인 i-2부터 
        for i in range(n-2, -1, -1): 
            # 로봇이 이동하려는 칸에 로봇이 없으며, 그 칸의 내구도 1 이상
            if robot[i] == 1 and robot[i+1] == 0 and belt[i+1] >= 1:
                robot[i+1] = 1 # 이동
                robot[i] = 0
                belt[i+1] -= 1  # 내구도 -1
        robot[-1] = 0 # 로봇 내려가는 위치이므로 0
        
    # 3. 올리는 위치(인덱스 0)에 있는 칸의 내구도가 0이 아니면 로봇 올림
    if robot[0] == 0 and belt[0] >= 1:
        robot[0] = 1
        belt[0] -= 1
    result += 1
    
    # 4. 내구도가 0인 칸의 개수가 k개 이상이면 과정 종료
    if belt.count(0) >= k:
        break

print(result)