# 10844번
# n이 주어질 때, 길이가 n인 계단 수가 총 몇 개 있는지 구하는 프로그램
# 계단 수) 인접한 모든 자리의 차이가 1인 수
# 0으로 시작하는 수는 계단 수가 아님

# 1 <= n <= 100
n = int(input())

dp = [[0] * 10 for _ in range(101)]

# n = 1일 때 경우의 수 초기화
for i in range(1, 10):
    dp[1][i] = 1

# n >= 2
for i in range(2, n+1):
    for j in range(10):
        # 가장 뒤에 오는 숫자 0
        if j == 0:
            dp[i][j] = dp[i-1][1]
        
        # 가장 뒤에 오는 숫자 1~8
        elif 1 <= j <= 8:
            dp[i][j] = dp[i-1][j-1] + dp[i-1][j+1]
        # 가장 뒤에 오는 숫자 9
        else:
            dp[i][j] = dp[i-1][8]

# 정답을 1,000,000,000으로 나눈 나머지 출력
print(sum(dp[n]) % 1000000000)

"""
- 맨 앞에 올 수 있는 숫자) 0을 제외한 모든 숫자
- 1~8 뒤에 올 수 있는 숫자) 2종류(+1 or -1)
- 9 뒤에 올 수 있는 숫자) 1종류(8만 가능)

dp[자릿수][해당 자릿수에서 가장 뒤에 오는 숫자] = 경우의 수

1. 가장 뒤에 오는 숫자) 0
    dp[자릿수][0] = dp[자릿수-1][1]
    : 0의 앞에는 1만 올 수 있음

2. 가장 뒤에 오는 숫자) 1~8
    dp[자릿수][가장 뒤에 오는 숫자] 
    = dp[자릿수-1][가장 뒤에 오는 숫자-1] + dp[자릿수-1][가장 뒤에 오는 숫자+1]
    : 1~8 앞에는 +1 또는 -1이 올 수 있음

3. 가장 뒤에 오는 숫자) 9
    dp[자릿수][9] = dp[자릿수-1][8]
    : 9 앞에는 8만 올 수 있음
"""